function persistentMenuSetup() {
	console.log("entered persistent menu setup");

	request({
		url: 'https://graph.facebook.com/v2.6/me/thread_settings?access_token=' + token,
		method: 'POST',
		json: {
			setting_type: "call_to_actions",
			thread_state: "existing_thread",
			call_to_actions: [
				{
				  type: "postback",
				  title: "By Product",
				  payload: "searchProduct"
				}, {
				  type: "postback",
				  title: "By Recipe",
				  payload: "searchRecipe"
				}, {
				  type: "web_url",
				  title: "By Barcode",
				  payload: "searchBarcode"
				}
			]
		}
	}, function(error, response, body) {
		//console.log(response);

		if (error) {
			console.log('Error sending messages: ', error);
		} else if (response.body.error) {
			console.log('Error: ', response.body.error);
		}
	}
})

*/
/*

	var headers = { 'Content-Type': 'application/json' };

	console.log("IN OPTIONS FOR PERSISTENT MENU SETUP");

	var options = {
		url: 'https://graph.facebook.com/v2.6/me/thread_settings?access_token=PAGE_ACCESS_TOKEN',
		method: 'POST',
		headers: headers,
		body: JSON.stringify({
			"setting_type": "call_to_actions",
			"thread_state": "existing_thread",
			"call_to_actions": [
				{
					"type": "postback",
					"title": "By Product",
					"payload": "searchProduct",
				},
				{
					"type": "postback",
					"title": "By Recipe",
					"payload": "searchRecipe",
				},
				{
					"type": "postback",
					"title": "By Barcode",
					"payload": "searchBarcode"
				}
			]
		})
	};

	request(options, function callback(error, response, body) {
		if (!error && response.statusCode == 200) {
			console.log(body);
			console.log("IN CALLBACK");
		}
	});
}

function sendGenericMessage(sender) {
	let messageData = {
		"attachment": {
			"type": "template",
			"payload": {
				"template_type": "generic",
				"elements": [{
					"title": "First card",
					"subtitle": "Element #1 of an hscroll",
					"image_url": "http://messengerdemo.parseapp.com/img/rift.png",
					"buttons": [
						{
							"type": "web_url",
							"url": "https://www.messenger.com",
							"title": "web url"
						}, {
							"type": "postback",
							"title": "Postback",
							"payload": "Payload for first element in a generic bubble",
						}
					],
				}, {
					"title": "Second card",
					"subtitle": "Element #2 of an hscroll",
					"image_url": "http://messengerdemo.parseapp.com/img/gearvr.png",
					"buttons": [{
						"type": "postback",
						"title": "Postback",
						"payload": "Payload for second element in a generic bubble",
					}],
				}]
			}
		}
	};

	request({
		url: 'https://graph.facebook.com/v2.6/me/messages',
		qs: { access_token: AUTH_TOKEN },
		method: 'POST',
		json: {
			recipient: { id: sender },
			message: messageData,
		}
	}, function(error, response, body) { // Callback
		if (error) {
			console.log('Error sending messages: ', error);
		} else if (response.body.error) {
			console.log('Error: ', response.body.error);
		}
	});
}

// To handle picture receive.
app.post('/webhook/', function (req, res) {
	var results;
	let messaging_events = req.body.entry[0].messaging;

	for (let i = 0; i < messaging_events.length; i++) {
		let event = req.body.entry[0].messaging[i];
		let sender = event.sender.id;

		if (event.message && event.message.attachment && event.message.attachment.type === 'image') {
			let image_url = event.message.attachment.paylod.url;

			action_handler.handlePicture(image_url, sender);
		}
	}

	res.sendStatus(200);
});

function loadIngredients(id) {
	var ingredients;

	id = id.replace("recipeSelected - ", "");
	console.log("id", id);

	var headers1 = {
		'X-Mashape-Key': 'RNsZ2tiy2pmshxmPkPRrn6viHrUwp1UZ22BjsnbuPVLyEnTS57',
		'Accept': 'application/json'
	};

	var options = {
		url: 'https://community-food2fork.p.mashape.com/get?key=9a266ac158d1966f7a00f043259f2c5e&rId=' + id,
		headers: headers1
	};

	console.log('https://community-food2fork.p.mashape.com/get?key=9a266ac158d1966f7a00f043259f2c5e&rId=' + id);

	request(options, function callback(error, response, body) {
		if (!error && response.statusCode == 200) {
			console.log(body);
			var resp = JSON.parse(body);
			var resps = resp.recipe;
			console.log(resps);
			ingredients = resps.ingredients;
			console.log(ingredients[0]);
			console.log(ingredients.count);

			if (ingredients.count !== 0) {
				displayIngredients(ingredients);
			} else {
				sendTextMessage(sender, "There are no results for that search.", AUTH_TOKEN);
			}
		}
	});
}

function displayIngredients(ingredients) {
	var items = [];
	var headers = {
		'Authorization': 'bearer fd887ce5-7b15-4c1e-93a0-dc91ce883ec6'
	};

	for (let i = 0; i < ingredients.length; i++) {
		var url = 'https://www.loblaws.ca/ecommerce/v2/loblaw/products/search?q=';
		url = url.concat(ingredients[i].split(' ').slice(2).join(' '), '&page=0&pageSize=10&sort=recommended');

		console.log(url);

		var options = {
			url: url,
			headers: headers
		};

		request(options, function callback(error, response, body) {
			if (!error && response.statusCode == 200) {
				console.log(body);
				var resp = JSON.parse(body);
				var results = resp.searchResults;
				console.log(results[0]);
				console.log(results.pagination.totalNumberOfResults);

				if(results.pagination.totalNumberOfResults !== 0) {
					console.log("SINGLE ITEM: ", results[0]);
					items.push(results[0]);
				}
				else{
					sendTextMessage(sendTo, "There are no results for that search.", AUTH_TOKEN);
				}
			}
		});
	}

	console.log("Items: ", items);
	showIngredients(items);
}

function showIngredients(ingredients) {
	let messageData = {
		"attachment": {
			"type": "template",
			"payload": {
				"template_type": "generic",
				"elements": loadElements(ingredients) // Load the products into an object that messenger api can handle
			}
		}
	};

	// Send message
	request({
		url: 'https://graph.facebook.com/v2.6/me/messages',
		qs: { access_token: AUTH_TOKEN },
		method: 'POST',
		json: {
			recipient: sendTo,
			message: messageData,
		}
	}, function(error, response, body) {
		if (error) {
			console.log('Error sending messages: ', error);
		} else if (response.body.error) {
			console.log('Error: ', response.body.error);
		}
	});
}

function Prompt(id, message) {
    this.id = id;
    this.message = message;

    this.sendPrompt = function() {
        // TODO Send prompt
    };

    this.getMessage = function() {
        return this.message;
    };

    this.getResponses = function() {
        return this.response;
    };

    this.getID = function() {
        return this.id;
    };

}

// In send product message..
/* "elements": [
	{
		"title": results.products[0].productName,
		"subtitle": results.products[0].description,
		"image_url": results.products[0].primaryImage,
		"buttons": [{
			"type": "web_url",
			"url": "https://www.messenger.com",
			"title": "web url"
		}, {
			"type": "postback",
			"title": "Postback",
			"payload": "Payload for first element in a generic bubble",
		}],
	}, {
		"title": "Second card",
		"subtitle": "Element #2 of an hscroll",
		"image_url": "http://messengerdemo.parseapp.com/img/gearvr.png",
		"buttons": [{
			"type": "postback",
			"title": "Postback",
			"payload": "Payload for second element in a generic bubble",
		}],
	}
] */
